BoardGamesApp/forms_json -> прилетают формы в json формате

BoardGamesApp/views.py -> вью контроллеры, выполняющие функционал по переходу на нужные адреса (urls)

BoardGamesApp/urls.py -> могут храниться адреса (urls) и функции для назначения данных для ключей словаря request
(запроса)

BoardGamesApp/run_app.py -> стартует сервер, назначает порт и фреймворк

BoardGamesApp/patterns.sqlite -> база данных

BoardGamesApp/log_file -> файл логов (какая веб страница запущена)

BoardGamesApp/errors.py -> файл с ошибками, написанными вручную

BoardGamesApp/data.py -> храняться данные в виде словаря для заполнения расписания игр. Использовался когда в проекте
ещё не было бд

BoardGamesApp/create_db.sql -> скрипт sql для создания базы данных с нужными таблицами

BoardGamesApp/create_db.py -> скрипт на питоне, который запускает скрипт sql для создания базы данных

BoardGamesApp/tests -> содержит тесты, которые проверяют работу с бд и тестовую бд

BoardGamesApp/templates -> содержит html шаблоны (для того чтоб из блоков собирать веб страницы)

BoardGamesApp/robot_framework/templator.py -> содержит функцию рендеринга страниц, которая работает с шаблонизатором
jinja2

BoardGamesApp/robot_framework/robot_requests.py -> содержит классы и методы для преобразования данных из get и post
запросов в нужный вид

BoardGamesApp/robot_framework/main.py -> содержит основной класс для работы самого фреймворка, который обрабатывает
запросы

BoardGamesApp/patterns/archetecturing_patterns.py -> содержит классы построенные на архетектурных паттернах
(подходы к проектированию крупных частей приложения). Регистрация объекта, направление объекта на действие.


BoardGamesApp/patterns/behavioring_patterns.py -> содержит классы построенные на поведенческих паттернах
(подходы для взаимодействия и коммуникации между объектами). Оповещалки, наблюдатели, работа с шаблонами.

BoardGamesApp/patterns/creationing_patterns.py -> содержит классы построенные на порождающих паттернах
(подходы по созданию объектов). Создания объектов таблиц для бд, мапперы (нужны для запросов к бд), синглтон
(нужен чтоб у класса был только один экземпляр класса)

BoardGamesApp/patterns/structuring_patterns.py -> содержит классы построенные на стурктурных паттернах
(подходы как из классов и объектов образуются более сложные структуры). Классы декораторы.


Взаимодействие объектов в программе:

create_db.py (запуск скрипта создания бд) -> create_db.sql (скрипт для создания бд) -> patterns.sqlite (готовая бд)

run_app.py (запуск приложения) -> main.py (старт фреймворка) на make_server + port

main.py (фреймворк) -> принимает post PostRequest() and get GetRequest() запросы -> записывает данные в request словарь

views.py (вьюшки) -> переход в браузере по url -> операция с данными или с бд -> передача данных в параметрах ->
рендеринг страницы


